// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `metashrew.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:metashrew.KeyValueFlush)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValueFlush {
    // message fields
    // @@protoc_insertion_point(field:metashrew.KeyValueFlush.list)
    pub list: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:metashrew.KeyValueFlush.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValueFlush {
    fn default() -> &'a KeyValueFlush {
        <KeyValueFlush as ::protobuf::Message>::default_instance()
    }
}

impl KeyValueFlush {
    pub fn new() -> KeyValueFlush {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "list",
            |m: &KeyValueFlush| { &m.list },
            |m: &mut KeyValueFlush| { &mut m.list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValueFlush>(
            "KeyValueFlush",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValueFlush {
    const NAME: &'static str = "KeyValueFlush";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.list.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.list {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.list {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValueFlush {
        KeyValueFlush::new()
    }

    fn clear(&mut self) {
        self.list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValueFlush {
        static instance: KeyValueFlush = KeyValueFlush {
            list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValueFlush {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValueFlush").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValueFlush {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValueFlush {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:metashrew.ViewFunction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ViewFunction {
    // message fields
    // @@protoc_insertion_point(field:metashrew.ViewFunction.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:metashrew.ViewFunction.input_type)
    pub input_type: ::std::string::String,
    // @@protoc_insertion_point(field:metashrew.ViewFunction.output_type)
    pub output_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:metashrew.ViewFunction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ViewFunction {
    fn default() -> &'a ViewFunction {
        <ViewFunction as ::protobuf::Message>::default_instance()
    }
}

impl ViewFunction {
    pub fn new() -> ViewFunction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ViewFunction| { &m.name },
            |m: &mut ViewFunction| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input_type",
            |m: &ViewFunction| { &m.input_type },
            |m: &mut ViewFunction| { &mut m.input_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "output_type",
            |m: &ViewFunction| { &m.output_type },
            |m: &mut ViewFunction| { &mut m.output_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ViewFunction>(
            "ViewFunction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ViewFunction {
    const NAME: &'static str = "ViewFunction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.input_type = is.read_string()?;
                },
                26 => {
                    self.output_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.input_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.input_type);
        }
        if !self.output_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.output_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.input_type.is_empty() {
            os.write_string(2, &self.input_type)?;
        }
        if !self.output_type.is_empty() {
            os.write_string(3, &self.output_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ViewFunction {
        ViewFunction::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.input_type.clear();
        self.output_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ViewFunction {
        static instance: ViewFunction = ViewFunction {
            name: ::std::string::String::new(),
            input_type: ::std::string::String::new(),
            output_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ViewFunction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ViewFunction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ViewFunction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewFunction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:metashrew.IndexerMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IndexerMetadata {
    // message fields
    // @@protoc_insertion_point(field:metashrew.IndexerMetadata.compiler_version)
    pub compiler_version: ::std::string::String,
    // @@protoc_insertion_point(field:metashrew.IndexerMetadata.rustc_version)
    pub rustc_version: ::std::string::String,
    // @@protoc_insertion_point(field:metashrew.IndexerMetadata.view_functions)
    pub view_functions: ::std::vec::Vec<ViewFunction>,
    // special fields
    // @@protoc_insertion_point(special_field:metashrew.IndexerMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IndexerMetadata {
    fn default() -> &'a IndexerMetadata {
        <IndexerMetadata as ::protobuf::Message>::default_instance()
    }
}

impl IndexerMetadata {
    pub fn new() -> IndexerMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "compiler_version",
            |m: &IndexerMetadata| { &m.compiler_version },
            |m: &mut IndexerMetadata| { &mut m.compiler_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rustc_version",
            |m: &IndexerMetadata| { &m.rustc_version },
            |m: &mut IndexerMetadata| { &mut m.rustc_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "view_functions",
            |m: &IndexerMetadata| { &m.view_functions },
            |m: &mut IndexerMetadata| { &mut m.view_functions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IndexerMetadata>(
            "IndexerMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IndexerMetadata {
    const NAME: &'static str = "IndexerMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.compiler_version = is.read_string()?;
                },
                18 => {
                    self.rustc_version = is.read_string()?;
                },
                26 => {
                    self.view_functions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.compiler_version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.compiler_version);
        }
        if !self.rustc_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rustc_version);
        }
        for value in &self.view_functions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.compiler_version.is_empty() {
            os.write_string(1, &self.compiler_version)?;
        }
        if !self.rustc_version.is_empty() {
            os.write_string(2, &self.rustc_version)?;
        }
        for v in &self.view_functions {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IndexerMetadata {
        IndexerMetadata::new()
    }

    fn clear(&mut self) {
        self.compiler_version.clear();
        self.rustc_version.clear();
        self.view_functions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IndexerMetadata {
        static instance: IndexerMetadata = IndexerMetadata {
            compiler_version: ::std::string::String::new(),
            rustc_version: ::std::string::String::new(),
            view_functions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IndexerMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IndexerMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IndexerMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexerMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fmetashrew.proto\x12\tmetashrew\"#\n\rKeyValueFlush\x12\x12\n\x04li\
    st\x18\x01\x20\x03(\x0cR\x04list\"b\n\x0cViewFunction\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x1d\n\ninput_type\x18\x02\x20\x01(\tR\t\
    inputType\x12\x1f\n\x0boutput_type\x18\x03\x20\x01(\tR\noutputType\"\xa1\
    \x01\n\x0fIndexerMetadata\x12)\n\x10compiler_version\x18\x01\x20\x01(\tR\
    \x0fcompilerVersion\x12#\n\rrustc_version\x18\x02\x20\x01(\tR\x0crustcVe\
    rsion\x12>\n\x0eview_functions\x18\x03\x20\x03(\x0b2\x17.metashrew.ViewF\
    unctionR\rviewFunctionsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(KeyValueFlush::generated_message_descriptor_data());
            messages.push(ViewFunction::generated_message_descriptor_data());
            messages.push(IndexerMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
